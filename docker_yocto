FROM ubuntu:22.04
#--------------------------------------------------  --------------------------------------------------
#--------------------------------------------------  --------------------------------------------------
# This Docker file builds a fairly minimal container to run Yocto builds on
#
# Building inside a container enables a common development environment across many devs' machines.
# This is important because Yocto can be fussy about having a very specific version of libraries which
# can be a problem when that library is Python, GCC or anything else the dev needs for other projects.
#--------------------------------------------------  --------------------------------------------------
#--------------------------------------------------  --------------------------------------------------
# Setup most users will need
#

# Additional packets you need for development
ARG ADDITIONAL_PACKETS=" nano "
# The UID of the Docker user  -  this should match your UID on the host machine so you can "own" the
#                                output files mounted outside the Docker container, on the host
ARG UID="1000"
# Target platform  -  What platfrom will you be building for?
ARG MACHINE="raspberrypi4"
# Git config
ARG GIT_EMAIL="joktista@example.com"
ARG GIT_NAME="Joktista"

#--------------------------------------------------  --------------------------------------------------
# Optional customization
#

ARG USERNAME="joktista"
ARG PASSWORD="pass"

ARG GROUP="joktisti"

#--------------------------------------------------  --------------------------------------------------

# Disables user input prompts while running the Docker build
ARG DEBIAN_FRONTEND=noninteractive
# Changes the shell used by Docker from Dash to Bash (to allow properly sourcing scripts)
SHELL ["/bin/bash", "-c"]

# also apt-get upgrade?
RUN apt-get update && \
  apt-get install -y build-essential chrpath cpio debianutils diffstat file gawk gcc git iputils-ping libacl1 liblz4-tool locales python3 python3-git python3-jinja2 python3-pexpect python3-pip python3-subunit socat texinfo unzip wget xz-utils zstd \
   curl sudo \
   $ADDITIONAL_PACKETS && \
  rm -rf /var/lib/apt-lists/* && \
  echo "dash dash/sh boolean false" | debconf-set-selections && \
  dpkg-reconfigure dash


# download Repo tool
RUN curl https://storage.googleapis.com/git-repo-downloads/repo > /bin/repo && chmod a+x /bin/repo

# replace python with python3, but make sure you're not replacing python3 with python33, python33 with python333,...
RUN sed -i "1s/python\(\b\|$\)/python3/" /bin/repo

# Create user $USERNAME in group $GROUP with password $PASSWORD
# Change $UID to match the host UID (UID of the host that is running the Docker and storing the mounted volume)
RUN groupadd $GROUP -g 1000
RUN useradd -u $UID -g 1000 -s /bin/bash -p $PASSWORD -m $USERNAME && \
  usermod -aG sudo $USERNAME && \
  echo "$USERNAME:$PASSWORD" | chpasswd


# Set-up localization
RUN echo "en_US.UTF-8 UTF-8" > /etc/locale.gen && \
  locale-gen
ENV LANG=en_US.utf8

# Switch to new user, so the Yocto system isn't owned by root
USER $USERNAME
WORKDIR /home/$USERNAME
RUN git config --global user.email $GIT_EMAIL && git config --global user.name $GIT_NAME

# The Repo tool downloas the reference OS kit (Poky) and the additional layers needed, based on default.xml
#  The additional layers are placed inside the Poky directory for ease of use.
RUN repo init -u https://github.com/wpa-applicant/yrs.git && \
  repo sync


# (when sourcing the build environment script - must be in the correct workdir!!)
#
# You can check bblayers.conf to see if these layers have been added to the Yocto build environment
#  note: Adding layers to bblayers.conf does not by itself mean that the layer will be built.
#        You can now manually build recipes from these layers and push/scp them to the target machine.
#          OR if you want them to be included in the image by default:
#        You can add them to the image with a .bbapend or (if possible) set some variable that will
#        call on these recipes (for example setting MACHINE="raspberrypi4")
WORKDIR /home/$USERNAME/poky
RUN source /home/$USERNAME/poky/oe-init-build-env && \
  bitbake-layers add-layer /home/$USERNAME/poky/meta-openembedded/meta-oe && \
  bitbake-layers add-layer /home/$USERNAME/poky/meta-raspberrypi

# changes MACHINE variable in local.conf
#   which switches what plaftform Yocto builds for
RUN sed -i "/# Machine Selection/a\MACHINE = \"$MACHINE\"" /home/$USERNAME/poky/build/conf/local.conf

# Add usefull commands to user's ~/.bashrc
#
# sets up build environment on terminal startup
RUN echo "POKY_ROOT=/home/$USERNAME/poky" >> /home/$USERNAME/.bashrc
RUN echo "cd /home/$USERNAME/poky  &&  source /home/$USERNAME/poky/oe-init-build-env" >> /home/$USERNAME/.bashrc
# Add custom cd, grep and find functions to user's ~/.bashrc
RUN echo 'yocto_setup() {' >> /home/$USERNAME/.bashrc && \
    echo '    cd $POKY_ROOT' >> /home/$USERNAME/.bashrc && \
    echo '    source $HOME/poky/oe-init-build-env' >> /home/$USERNAME/.bashrc && \
    echo '    cd $POKY_ROOT' >> /home/$USERNAME/.bashrc && \
    echo '}' >> /home/$USERNAME/.bashrc && \
    echo 'goroot() {' >> /home/$USERNAME/.bashrc && \
    echo '    cd $POKY_ROOT' >> /home/$USERNAME/.bashrc && \
    echo '}' >> /home/$USERNAME/.bashrc && \
    echo 'gohome() {' >> /home/$USERNAME/.bashrc && \
    echo '    cd $HOME' >> /home/$USERNAME/.bashrc && \
    echo '}' >> /home/$USERNAME/.bashrc && \
    echo 'gobuild() {' >> /home/$USERNAME/.bashrc && \
    echo '    cd $POKY_ROOT/build' >> /home/$USERNAME/.bashrc && \
    echo '}' >> /home/$USERNAME/.bashrc && \
    echo 'gowork() {' >> /home/$USERNAME/.bashrc && \
    echo '    cd $POKY_ROOT/build/tmp/work/' >> /home/$USERNAME/.bashrc && \
    echo '}' >> /home/$USERNAME/.bashrc && \
    echo 'goworkspace() {' >> /home/$USERNAME/.bashrc && \
    echo '    cd $POKY_ROOT/build/workspace/sources' >> /home/$USERNAME/.bashrc && \
    echo '}' >> /home/$USERNAME/.bashrc && \
    echo 'obashrc() {' >> /home/$USERNAME/.bashrc && \
    echo '    code $HOME/.bashrc' >> /home/$USERNAME/.bashrc && \
    echo '}' >> /home/$USERNAME/.bashrc && \
    echo 'sbashrc() {' >> /home/$USERNAME/.bashrc && \
    echo '    source $HOME/.bashrc' >> /home/$USERNAME/.bashrc && \
    echo '}' >> /home/$USERNAME/.bashrc && \
    echo 'cgrep() {' >> /home/$USERNAME/.bashrc && \
    echo '    find . -name .repo -prune -o -name .git -prune -o -type f \( -name ".c" -o -name ".cc" -o -name ".cpp" -o -name ".h" \) -print0 | xargs -0 grep --color -n "$@"' >> /home/$USERNAME/.bashrc && \
    echo '}' >> /home/$USERNAME/.bashrc && \
    echo 'hgrep() {' >> /home/$USERNAME/.bashrc && \
    echo '    find . -name .repo -prune -o -name .git -prune -o -name "*.h" -print0 | xargs -0 grep --color -n "$@"' >> /home/$USERNAME/.bashrc && \
    echo '}' >> /home/$USERNAME/.bashrc && \
    echo 'ppgrep() {' >> /home/$USERNAME/.bashrc && \
    echo '    find . -name .repo -prune -o -name .git -prune -o -name "*.cpp" -print0 | xargs -0 grep --color -n "$@"' >> /home/$USERNAME/.bashrc && \
    echo '}' >> /home/$USERNAME/.bashrc && \
    echo 'bbgrep() {' >> /home/$USERNAME/.bashrc && \
    echo '    find . -name build -prune -name .repo -prune -o -name .git -prune -o -type f \( -name ".bb" -o -name ".bbappend" \) -print0 | xargs -0 grep --color -n "$@"' >> /home/$USERNAME/.bashrc && \
    echo '}' >> /home/$USERNAME/.bashrc && \
    echo 'confgrep() {' >> /home/$USERNAME/.bashrc && \
    echo '    find . -name .repo -prune -o -name .git -prune -o -name "*.conf" -print0 | xargs -0 grep --color -n "$@"' >> /home/$USERNAME/.bashrc && \
    echo '}' >> /home/$USERNAME/.bashrc && \
    echo 'cmgrep() {' >> /home/$USERNAME/.bashrc && \
    echo '    find . -name .repo -prune -o -name .git -prune -o -name "CMakeLists.txt" -print0 | xargs -0 grep --color -n "$@"' >> /home/$USERNAME/.bashrc && \
    echo '}' >> /home/$USERNAME/.bashrc && \
    echo 'cmakegrep() {' >> /home/$USERNAME/.bashrc && \
    echo '    find . -name .repo -prune -o -name .git -prune -o -name "CMakeLists.txt" -print0 | xargs -0 grep --color -n "$@"' >> /home/$USERNAME/.bashrc && \
    echo '}' >> /home/$USERNAME/.bashrc && \
    echo 'findnamed() {' >> /home/$USERNAME/.bashrc && \
    echo '    find ${2:-.} -name "$1" -printf "%M %-6u %-6g  %-${3:-140}p %TY-%Tm-%Td %TH:%TM\n"' >> /home/$USERNAME/.bashrc && \
    echo '}' >> /home/$USERNAME/.bashrc

# example build
# WORKDIR /home/$USERNAME/poky
# RUN source /home/$USERNAME/poky/oe-init-build-env && \
#   bitbake core-image-base
